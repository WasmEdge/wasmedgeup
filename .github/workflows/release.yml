name: Release

on:
  pull_request:
    types: [closed]
    branches: [master]
  workflow_dispatch:

jobs:
  get-tag:
    if: (github.head_ref == 'knope/release' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - run: echo "tag_name=$(gh release list --json 'isDraft,tagName' --jq '.[] | select(.isDraft) | .tagName')" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}
        id: get-tag

    outputs:
      tag_name: ${{ steps.get-tag.outputs.tag_name }}

  build-artifacts:
    needs: [get-tag]
    if: needs.get-tag.outputs.tag_name != ''
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    env:
      package_name: wasmedgeup

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.target }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          target: ${{ matrix.target }}

      - name: Install musl-tools
        if: "${{ matrix.target == 'x86_64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-musl' }}"
        run: sudo apt-get install -y musl-tools

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Set archive name (non-windows)
        id: archive
        run: >
          echo "archive_name=${{ env.package_name }}-${{ matrix.target }}" >> "$GITHUB_ENV"

      - name: Set archive name (windows)
        if: "${{ matrix.os == 'windows-latest' }}"
        shell: pwsh
        run: >
          echo "archive_name=${{ env.package_name }}-${{ matrix.target }}"
           | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create Archive Folder
        run: mkdir ${{ env.archive_name }}

      - name: Copy Unix Artifact
        if: "${{ matrix.os != 'windows-latest' }}"
        run: cp target/${{ matrix.target }}/release/${{ env.package_name }} ${{ env.archive_name }}

      - name: Copy Windows Artifact
        if: ${{ matrix.os == 'windows-latest' }}
        run: cp target/${{ matrix.target }}/release/${{ env.package_name }}.exe ${{ env.archive_name }}

      - name: Create Tar Archive
        run: tar -czf ${{ env.archive_name }}.tgz ${{ env.archive_name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.target }}
          path: ${{ env.archive_name }}.tgz
          if-no-files-found: error

  release:
    needs: [get-tag, build-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: artifacts
          merge-multiple: true

      - name: Upload artifacts to release
        run: |
          cd artifacts
          gh release upload ${{ needs.get-tag.outputs.tag_name }} ./*
          gh release edit ${{ needs.get-tag.outputs.tag_name }} --draft=false --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup rust toolchain
        uses: ./.github/actions/setup-rust

      - uses: katyo/publish-crate@v2
        with:
          registry-token: ${{ secrets.CARGO_TOKEN }}
